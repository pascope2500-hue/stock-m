// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  role      Role
  password  String
  status    UserStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
  sells     Sell[]

  @@map("users")
}

model Company {
  id             Int      @id @default(autoincrement())
  name           String
  logo           String?
  address        String?
  lowStockLevel  Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  users          User[]
  inventories    Inventory[]
  customers      Customer[]
  notifications  Notification[]

  @@map("companies")
}

model Inventory {
  id             Int      @id @default(autoincrement())
  sku            Int?
  productName    String
  quantity       Int
  purchasePrice  Float
  sellingPrice   Float
  purchaseDate   DateTime?
  expirationDate DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      Int
  sells          Sell[]

  @@map("inventories")
}

model Customer {
  id      Int   @id @default(autoincrement())
  customerName String
  customerPhone String?
  companyId Int
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sells     Sell[]
}

model Sell {
  id            Int      @id @default(autoincrement())
  quantity      Int
  price         Int
  totalAmount   Int
  customerId    Int
  status        Status
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  inventory     Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId   Int
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("sells")
}


  model Notification {
  id      Int   @id @default(autoincrement())
  title   String
  message String
  type    NotificationType
  timestamp DateTime @default(now())
  read    Boolean @default(false)
  actionUrl String?
  entity  String
  entityId Int
  companyId Int
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  }

enum NotificationType {
  Info
  Success
  Warning
  Error
}

enum Role {
  Admin
  User
  Seller
}

enum UserStatus {
  Active
  Inactive
}

enum Status {
  Pending
  Failed
  Cancelled
  Completed
}